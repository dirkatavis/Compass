import json
import time
import pytest
from selenium.webdriver.common.by import By
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.support.ui import WebDriverWait

from core import driver_manager
from pages.login_page import LoginPage
from utils.data_loader import load_mvas
from utils.ui_helpers import (click_complaints, click_work_items,
                              debug_list_work_items, get_complaints,
                              get_work_items, has_open_of_type,
                              has_open_workitems_of_type,
                              process_pm_workitem_flow, click_button)

# Utility: enter MVA and wait for the echoed value in the vehicle pane
def _enter_mva_and_wait_for_hit(driver, mva: str, timeout: int = 12):
	# ensure we're focused on the Mobile Compass tab
	driver.switch_to.window(driver.window_handles[-1])

	# Find the active vehicle search input (defensive locators)
	candidates = [
		(By.CSS_SELECTOR, "input.bp6-input[placeholder*='Enter MVA']"),
		(By.XPATH, "//input[@type='text' and contains(@placeholder,'MVA')]"),
		(By.XPATH, "//div[@role='tabpanel' and @aria-hidden='false']//input[@type='text']"),
	]
	field = None
	for by, sel in candidates:
		try:
			field = WebDriverWait(driver, 4).until(
				EC.visibility_of_element_located((by, sel))
			)
			break
		except Exception:
			continue

	if not field:
		print("[MVA][ERROR] input field not found")
		return None

	# Clear and type the MVA (auto-search on 8 digits)
	field.click()
	time.sleep(0.2)
	field.clear()
	for ch in str(mva):
		field.send_keys(ch)
		time.sleep(0.05)

	# Wait for the echoed MVA in the vehicle pane (success signal)
	try:
		last8 = str(mva)[-8:]
		# Prefer: find the property row where the label is exactly "MVA", then its value div contains our last 8
		xp_by_label = (
			"//div[contains(@class,'vehicle-properties-container')]"
			"//div[contains(@class,'vehicle-property__')]"
			"[div[contains(@class,'vehicle-property-name')][normalize-space()='MVA']]"
			"/div[contains(@class,'vehicle-property-value')][contains(normalize-space(), '" + last8 + "')]"
		)
		elem = WebDriverWait(driver, timeout).until(
			EC.presence_of_element_located((By.XPATH, xp_by_label))
		)
	except Exception:
		# Fallback: any value cell in the properties area that contains our last 8 digits
		try:
			xp_any_value_contains = (
				"//div[contains(@class,'vehicle-properties-container')]"
				"//div[contains(@class,'vehicle-property-value')][contains(normalize-space(), '" + last8 + "')]"
			)
			elem = WebDriverWait(driver, 3).until(
				EC.presence_of_element_located((By.XPATH, xp_any_value_contains))
			)
		except Exception:
			print(f"[MVA][ERROR] echoed value not found (looked for last8='{last8}')")
			return None


	time.sleep(1.0)  # Allow time for UI to settle
	print(f"[MVA] Verification passed — {mva} echoed in vehicle pane")
	return elem


# Load config
with open(r"C:\temp\Python\config\config.json", "r") as f:
	cfg = json.load(f)
USERNAME = cfg.get("username")
PASSWORD = cfg.get("password")
LOGIN_ID = cfg.get("login_id")


@pytest.mark.smoke
def test_mva_complaints_tab():
	driver = driver_manager.get_or_create_driver()
	try:
		login_page = LoginPage(driver)
		# Old: login_page.ensure_logged_in(USERNAME, PASSWORD, LOGIN_ID)
		# New (matches your original flow): ensures login + clicks "Compass Mobile" + waits for WWID UI
		login_page.ensure_ready(USERNAME, PASSWORD, LOGIN_ID)
		login_page.enter_wwid(LOGIN_ID)

		# Load MVAs
		mvas = load_mvas(r"C:\temp\Python\data\mva.csv")
		assert mvas, "Expected at least one MVA in CSV"

		for mva in mvas:
			print(f"[MVA] start → {mva}")
			hit = _enter_mva_and_wait_for_hit(driver, mva)
			assert hit is not None, f"Expected to find a matching vehicle tile for MVA {mva}"

			# NEW FLOW (desktop-safe):
			# 1) Open Work Items tab
			click_work_items(driver)

			# 2) Check if an OPEN PM Work Item already exists
			items = get_work_items(driver)
			if has_open_of_type(items, "PM"):
				print(f"[WORKITEM] {mva} — PM work item already exists; skipping create")
				print(f"[MVA] completed → {mva}")
				continue

			# 3) No PM exists → create one by clicking "Add Work Item" and selecting PM tiles
			# (Handled inside process_pm_workitem_flow)
			if not click_button(driver, text="Add Work Item", timeout=8):
				_ = click_button(driver, css_class="fleet-operations-pwa__create-item-button__1gmnvu9", timeout=8)
				result = process_pm_workitem_flow(driver, pre_clicked=True)
			print(f"[WORKITEM] {mva} → {result}")
			print(f"[MVA] completed → {mva}")
	finally:

		time.sleep(30)
