"""Flows for creating, processing, and handling Compass Work Items."""
import time
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import NoSuchElementException, TimeoutException
from selenium.webdriver.common.by import By
from flows.complaints_flows import associate_existing_complaint
from flows.finalize_flow import finalize_workitem
from utils.logger import log
from utils.ui_helpers import click_element, safe_wait

def _log_work_items(driver):
    """Helper function to log all visible work items for debugging."""
    try:
        headers = driver.find_elements(By.CSS_SELECTOR, "[class*='fleet-operations-pwa__scan-record-header__']")
        log.info(f"[WORKITEM] Found {len(headers)} work item headers")
        for header in headers:
            try:
                title = header.find_element(By.CSS_SELECTOR, "[class*='scan-record-header-title__']").text
                status = header.find_element(By.CSS_SELECTOR, "[class*='scan-record-header-title-right__']").text
                log.info(f"[WORKITEM] Work item found - Title: {title}, Status: {status}")
            except Exception as e:
                log.warning(f"[WORKITEM] Could not get details for work item: {str(e)}")
    except Exception as e:
        log.warning(f"[WORKITEM] Error logging work items: {str(e)}")

def open_pm_workitem_card(driver, mva: str, timeout: int = 8) -> dict:
    """Click to open an existing PM Work Item card."""
    try:
        # Log current work items for debugging
        _log_work_items(driver)
        
        # Wait for loading spinner to disappear if present
        try:
            spinner = driver.find_element(By.CSS_SELECTOR, ".bp6-spinner")
            if spinner.is_displayed():
                WebDriverWait(driver, 10).until(
                    EC.invisibility_of_element(spinner)
                )
                time.sleep(1)  # Allow UI to stabilize
        except:
            pass  # No spinner found
            
        # Look for work item with more flexible locator that handles dynamic class suffixes
        max_attempts = 3
        for attempt in range(max_attempts):
            try:
                # More flexible locator that handles dynamic class suffixes and Unknown status
                tile = WebDriverWait(driver, timeout).until(
                    EC.element_to_be_clickable((
                        By.XPATH,
                        "//div[contains(@class,'fleet-operations-pwa__scan-record-header__')]"
                        "[.//div[contains(@class,'scan-record-header-title__')]"
                        "[normalize-space()='PM' or normalize-space()='PM Hard Hold - PM' or normalize-space()='Unknown']]"
                        "[.//div[contains(@class,'scan-record-header-title-right__')][normalize-space()='Open']]"
                    ))
                )
                
                if tile.is_displayed() and tile.is_enabled():
                    log.info(f"[WORKITEM] {mva} - Found clickable work item tile")
                    
                    # Get title and status for logging
                    try:
                        title = tile.find_element(By.CSS_SELECTOR, "[class*='scan-record-header-title__']").text
                        status = tile.find_element(By.CSS_SELECTOR, "[class*='scan-record-header-title-right__']").text
                        log.info(f"[WORKITEM] {mva} - Selected work item - Title: {title}, Status: {status}")
                    except:
                        pass
                        
                    tile.click()
                    log.info(f"[WORKITEM] {mva} - Clicked work item tile")
                    return {"status": "ok", "reason": "clicked", "mva": mva}
                    
            except Exception as e:
                if attempt == max_attempts - 1:
                    log.error(f"[WORKITEM] {mva} - All attempts to find work item failed: {str(e)}")
                    return {"status": "failed", "reason": "find_failed", "mva": mva}
                time.sleep(2)  # Wait before retry
                
        return {"status": "failed", "reason": "not_found", "mva": mva}
            
    except Exception as e:
        log.error(f"[WORKITEM] {mva} - Error in open_pm_workitem_card: {str(e)}")
        return {"status": "failed", "reason": "exception", "mva": mva}